# Generated by Django 2.2.13 on 2021-01-06 09:51

from django.db import migrations, models
import django.db.models.deletion
import wagtail.core.blocks
import wagtail.core.fields
import wagtail.images.blocks
import wagtailmetadata.models


class Migration(migrations.Migration):

    dependencies = [
        ("wagtailimages", "0022_uploadedimage"),
        ("wagtailcore", "0045_assign_unlock_grouppagepermission"),
        ("cms", "0046_page_data_migrations"),
    ]

    operations = [
        migrations.CreateModel(
            name="ExternalProgramPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.Page",
                    ),
                ),
                (
                    "description",
                    wagtail.core.fields.RichTextField(
                        blank=True,
                        help_text="The description shown on the product page",
                    ),
                ),
                (
                    "catalog_details",
                    wagtail.core.fields.RichTextField(
                        blank=True,
                        help_text="The description shown on the catalog page for this product",
                    ),
                ),
                (
                    "subhead",
                    models.CharField(
                        help_text="A short subheading to appear below the title on the program/course page",
                        max_length=255,
                    ),
                ),
                (
                    "video_title",
                    wagtail.core.fields.RichTextField(
                        blank=True,
                        help_text="The title to be displayed for the program/course video",
                    ),
                ),
                (
                    "video_url",
                    models.URLField(
                        blank=True,
                        help_text="URL to the video to be displayed for this program/course. It can be an HLS or Youtube video URL.",
                        null=True,
                    ),
                ),
                (
                    "duration",
                    models.CharField(
                        blank=True,
                        help_text="A short description indicating how long it takes to complete (e.g. '4 weeks')",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "background_video_url",
                    models.URLField(
                        blank=True,
                        help_text="Background video that should play over the hero section. Must be an HLS video URL. Will cover background image if selected.",
                        null=True,
                    ),
                ),
                (
                    "time_commitment",
                    models.CharField(
                        blank=True,
                        help_text="A short description indicating about the time commitments.",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "featured",
                    models.BooleanField(
                        blank=True,
                        default=False,
                        help_text="When checked, product will be shown as featured.",
                    ),
                ),
                (
                    "content",
                    wagtail.core.fields.StreamField(
                        [
                            (
                                "heading",
                                wagtail.core.blocks.CharBlock(classname="full title"),
                            ),
                            ("paragraph", wagtail.core.blocks.RichTextBlock()),
                            ("image", wagtail.images.blocks.ImageChooserBlock()),
                            ("raw_html", wagtail.core.blocks.RawHTMLBlock()),
                        ],
                        blank=True,
                        help_text="The content of this tab on the program page",
                    ),
                ),
                (
                    "external_url",
                    models.URLField(
                        help_text="The URL of the external program web page."
                    ),
                ),
                (
                    "readable_id",
                    models.CharField(
                        help_text="The readable ID of the external program. Appears in URL, has to be unique.",
                        max_length=64,
                        unique=True,
                    ),
                ),
                (
                    "start_date",
                    models.DateField(
                        blank=True,
                        help_text="The start date of the external program.",
                        null=True,
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="The price of the external program.",
                        max_digits=20,
                        null=True,
                    ),
                ),
                (
                    "course_count",
                    models.IntegerField(
                        help_text="The number of total courses in the external program."
                    ),
                ),
                (
                    "background_image",
                    models.ForeignKey(
                        blank=True,
                        help_text="Background image size must be at least 1900x650 pixels.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailimages.Image",
                    ),
                ),
                (
                    "search_image",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailimages.Image",
                        verbose_name="Search image",
                    ),
                ),
                (
                    "thumbnail_image",
                    models.ForeignKey(
                        blank=True,
                        help_text="Thumbnail size must be at least 550x310 pixels.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailimages.Image",
                    ),
                ),
            ],
            options={"abstract": False},
            bases=(
                wagtailmetadata.models.MetadataMixin,
                "wagtailcore.page",
                models.Model,
            ),
        )
    ]
