# Generated by Django 3.2.18 on 2023-05-12 10:31
import datetime

import django.db.models.deletion
import pytz
import wagtailmetadata.models
from django.db import migrations, models
from wagtail.models import Page, Revision

import cms.models


def create_webinar_index_page(apps, app_schema):
    """
    Creates index page for webinars
    """
    Site = apps.get_model("wagtailcore", "Site")
    site = Site.objects.filter(is_default_site=True).first()
    if not site:
        raise Exception(
            "A default site is not set up. Please setup a default site before running this migration"
        )
    if not site.root_page:
        raise Exception(
            "No root (home) page set up. Please setup a root (home) page for the default site before running this migration"
        )

    home_page = Page.objects.get(id=site.root_page.id)
    WebinarIndexPage = apps.get_model("cms", "WebinarIndexPage")
    ContentType = apps.get_model("contenttypes", "ContentType")

    webinar_index_content_type, _ = ContentType.objects.get_or_create(
        app_label="cms", model="webinarindexpage"
    )
    webinar_index = WebinarIndexPage.objects.first()

    if not webinar_index:
        webinar_page_content = dict(
            title="Webinars",
            content_type_id=webinar_index_content_type.id,
            locale_id=home_page.get_default_locale().id,
            live=True,
        )
        webinar_page_obj = WebinarIndexPage(**webinar_page_content)
        home_page.add_child(instance=webinar_page_obj)
        # NOTE: This block of code creates page revision and publishes it. There may be an easier way to do this.
        content = dict(**webinar_page_content, pk=webinar_page_obj.id)
        Revision.objects.create(
            content_object=webinar_page_obj,
            content_type=webinar_page_obj.content_type,
            base_content_type=home_page.content_type,
            submitted_for_moderation=False,
            created_at=datetime.datetime.now(tz=pytz.UTC),
            content=content,
        )
        # revision.publish()


def delete_webinar_index_page(apps, app_schema):
    ContentType = apps.get_model("contenttypes.ContentType")
    webinar_index_content_type, _ = ContentType.objects.get_or_create(
        app_label="cms", model="webinarindexpage"
    )
    webinar_index_page = Page.objects.filter(
        content_type_id=webinar_index_content_type.id
    ).first()
    if webinar_index_page:
        webinar_index_page.delete()


class Migration(migrations.Migration):

    dependencies = [
        ("wagtailimages", "0023_add_choose_permissions"),
        ("wagtailcore", "0076_modellogentry_revision"),
        ("cms", "0059_remove_unused_external_courseware_fields"),
    ]

    operations = [
        migrations.CreateModel(
            name="WebinarIndexPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailcore.page", cms.models.CanCreatePageMixin),
        ),
        migrations.CreateModel(
            name="WebinarPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[("UPCOMING", "UPCOMING"), ("ON-DEMAND", "ON-DEMAND")],
                        max_length=20,
                    ),
                ),
                (
                    "date",
                    models.DateField(
                        blank=True,
                        help_text="The start date of the webinar.",
                        null=True,
                    ),
                ),
                (
                    "time",
                    models.TextField(
                        blank=True,
                        help_text="The timings of the webinar e.g (11 AM - 12 PM ET).",
                        null=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of the webinar.", null=True
                    ),
                ),
                (
                    "action_title",
                    models.CharField(
                        help_text="Specify the webinar call-to-action text here (e.g: 'REGISTER, VIEW RECORDING').",
                        max_length=255,
                    ),
                ),
                (
                    "action_url",
                    models.URLField(
                        help_text="Specify the webinar action-url here (like a link to an external webinar page)."
                    ),
                ),
                (
                    "banner_image",
                    models.ForeignKey(
                        blank=True,
                        help_text="Banner image for the Webinar.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailimages.image",
                    ),
                ),
                (
                    "search_image",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailimages.image",
                        verbose_name="Search image",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(
                wagtailmetadata.models.MetadataMixin,
                "wagtailcore.page",
                models.Model,
            ),
        ),
        # This is not required moving forward as seed data creates the webinar index page.
        # This causes migration errors when we change the webinar index page.
        # migrations.RunPython(create_webinar_index_page, delete_webinar_index_page),
    ]
