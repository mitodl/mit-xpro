[tool.poetry]
name = "MITx Pro"
version = "0.1.0"
description = "MITx Pro"
authors = ["MIT ODL"]
license = "BSD-3"
readme = "README.md"
packages = []

[tool.poetry.dependencies]
python = "3.9.15"

Pillow = "10.3.0"
PyNaCl = "1.5.0"
beautifulsoup4 = "4.8.2"
boto3 = "1.34.122"
celery = "5.4.0"
celery-redbeat = "2.2.0"
dj-database-url = "0.5.0"
django = "4.2.14"
django-anymail = { version = "8.6", extras = ["mailgun"] }
django-filter = "^23.4"
django-hijack = "3.4.5"
django-ipware = "3.0.7"
django-oauth-toolkit = "1.7.1"
django-redis = "5.0.0"
django-robots = "6.0.0"
django-silk = "^5.0.3"
django-storages = "1.14.3"
django-user-agents = "0.4.0"
django-webpack-loader = "0.7.0"
djangorestframework = "3.15.2"
drf-flex-fields = "0.9.9"
edx-api-client = "1.9.0"
flaky = "3.8.1"
google-api-python-client = "1.12.11"
google-auth = "1.35.0"
hubspot-api-client = "^6.1.0"
ipython = "^8.10.0"
mitol-django-authentication = "2023.12.19"
mitol-django-common = "2023.12.19"
mitol-django-digital-credentials = "2023.12.19"
mitol-django-hubspot-api = { version = "2023.12.19", extras = [] }
mitol-django-mail = "2023.12.19"
mitol-django-oauth-toolkit-extensions = "2023.12.19.1"
newrelic = "^8.4.0"
pdftotext = "^2.1.1"
psycopg2 = "2.9.9"
pycountry = "19.8.18"
pygsheets = "2.0.2"
redis = "4.6.0"
requests = "^2.31.0"
sentry-sdk = "^1.22.0"
social-auth-app-django = "^5.4.0"
ua-parser = "0.8.0"
ulid-py = "^1.1.0"
user-agents = "2.0"
user-util = "0.1.5"
uwsgi = "2.0.26"
wagtail = "5.2.5"
wagtail-metadata = "5.0.0"
xmltodict = "^0.13.0"
zeep = "3.4.0"

[tool.poetry.group.dev.dependencies]
bpython = "*"
django-debug-toolbar = "*"
factory-boy = "3.3.0"
faker = "13.16.0"
freezegun = "0.3.15"
hypothesis = "4.23.4"
ipdb = "*"
nplusone = ">=0.8.1"
pdbpp = "*"
pytest = "^7.4.4"
pytest-cov = ">=2.6.1"
pytest-django = "*"
pytest-env = "*"
pytest-lazy-fixture = "0.6.3"
pytest-mock = "*"
responses = "*"
ruff = "^0.4.0"
safety = "*"
semantic-version = "*"
wagtail-factories = "*"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
target-version = "py39"
line-length = 88

[tool.ruff.lint]
select = [
    "A",  # flake8-builtins
    # "AIR",  # Airflow
    # "ANN",  # flake8-annotations
    "ARG",  # flake8-unused-arguments
    # "ASYNC",  # flake8-async
    "B",  # flake8-bugbear
    "BLE",  # flake8-blind-except
    "C4",  # flake8-comprehensions
    "C90",  # mccabe
    # "COM",  # flake8-commas
    # "CPY",  # flake8-copyright
    "D",  # pydocstyle
    "DJ",  # flake8-django
    "DTZ",  # flake8-datetimez
    "E",  # Pycodestyle Error
    "EM",  # flake8-errmsg
    "ERA",  # eradicate
    "EXE",  # flake8-executable
    "F",  # Pyflakes
    "FA",  # flake8-future-annotations
    "FBT",  # flake8-boolean-trap
    "FIX",  # flake8-fixme
    "FLY",  # flynt
    # "FURB",  # refurb
    "G",  # flake8-logging-format
    "I",  # isort
    "ICN",  # flake8-import-conventions
    "INP",  # flake8-no-pep420
    "INT",  # flake8-gettext
    "ISC",  # flake8-implicit-str-concat
    "N",  # pep8-naming
    # "NPY",  # NumPy-specific rules
    # "PD",  # pandas-vet
    "PERF",  # Perflint
    "PGH",  # pygrep-hooks
    "PIE",  # flake8-pie
    "PL",  # Pylint
    "PT",  # flake8-pytest-style
    "PTH",  # flake8-use-pathlib
    "PYI",  # flake8-pyi
    "Q",  # flake8-quotes
    "RET",  # flake8-return
    "RSE",  # flake8-raise
    "RUF",  # Ruff-specific rules
    "S",  # flake8-bandit
    "SIM",  # flake8-simplify
    "SLF",  # flake8-self
    "SLOT",  # flake8-slots
    "T10",  # flake8-debugger
    "T20",  # flake8-print
    "TCH",  # flake8-type-checking
    "TD",  # flake8-todos
    "TID",  # flake8-tidy-imports
    "TRY",  # tryceratops
    "UP",  # pyupgrade
    "W",  # Pycodestyle Warning
    "YTT",  # flake8-2020
]
ignore = [
    "B008",
    "B905",
    "D106",
    "D104",
    "D200",
    "D202",
    "D205",
    "D301",
    "D400",
    "D401",
    "E501",
    "N803",
    "N806",
    "N999",
    "PIE804",
    "PT023",
    "RET505",
    "RET506",
    "RET507",
    "RET508",
    "RUF012",
    "UP007",
    "A003",
    "TRY003",
    "INP001",
    "D105",
    "D107",
    "PLR0912",
    "ISC001",
]

typing-modules = ["colour.hints"]

[tool.ruff.lint.pydocstyle]
convention = "pep257"

[tool.ruff.lint.flake8-quotes]
inline-quotes = "double"

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false

[tool.ruff.lint.per-file-ignores]
"*_test.py" = ["ARG001", "E501", "S101", "PLR2004"]
"test_*.py" = ["ARG001", "E501", "S101", "PLR2004"]
"**/migrations/**" = ["ARG001", "D101", "D100"]
