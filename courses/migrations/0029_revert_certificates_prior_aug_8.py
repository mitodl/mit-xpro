# Generated by Django 3.2.15 on 2022-10-26 15:40

from datetime import datetime, timezone

from django.db import migrations

from cms.models import CertificatePage
from courses.models import CourseRunCertificate, ProgramCertificate

AUGUST_8_2022 = datetime(2022, 8, 8, tzinfo=timezone.utc)
SEPTEMBER_20_2022 = datetime(2022, 9, 20, tzinfo=timezone.utc)


def get_course_certificate_cms_page(course_run_cert):
    """Try to get the CMS page for a course certificate"""
    return (
        course_run_cert.course_run.course.page.get_children()
        .type(CertificatePage)
        .live()
        .first()
        if course_run_cert.course_run.course.page
        else None
    )


def get_program_certificate_cms_page(program_cert):
    """Try to get the CMS page for a program certificate"""
    return (
        program_cert.program.page.certificate_page
        if program_cert.program.page
        else None
    )


def get_latest_revision_by_date(certificate_page, max_date):
    """Get the latest certificate page revision created till max_date"""
    return (
        certificate_page.revisions.filter(created_at__lte=max_date)
        .order_by("-created_at")
        .first()
    )


def set_latest_certificate_revision(apps, schema_editor):
    """
    Fetch all CourseRunCertificates and ProgramCertificate to update certificate_page_revision to latest revision prior
    to August 8 2022
    """

    course_run_certificates_till_aug_8 = CourseRunCertificate.objects.filter(
        created_on__lte=AUGUST_8_2022
    )

    for cert in course_run_certificates_till_aug_8:
        certificate_page = get_course_certificate_cms_page(cert)
        # Since this is undo operation, so we undo the states to when the original data migration run
        # The original data migration ran on September 20, 2022
        if certificate_page:
            cert.certificate_page_revision = get_latest_revision_by_date(
                certificate_page, SEPTEMBER_20_2022
            )

    CourseRunCertificate.objects.bulk_update(
        course_run_certificates_till_aug_8, ["certificate_page_revision"]
    )

    program_certificates_till_aug_8 = ProgramCertificate.objects.filter(
        created_on__lte=AUGUST_8_2022
    )

    for cert in program_certificates_till_aug_8:
        certificate_page = get_program_certificate_cms_page(cert)
        if certificate_page:
            cert.certificate_page_revision = get_latest_revision_by_date(
                certificate_page, SEPTEMBER_20_2022
            )

    ProgramCertificate.objects.bulk_update(
        program_certificates_till_aug_8, ["certificate_page_revision"]
    )


def revert_course_program_certificate_revisions(apps, schema_editor):
    """
    Reverts the course and program certificate revisions prior to August 8 2022 to the relevant page revision as of that
    date
    """

    course_run_certificates_till_aug_8 = CourseRunCertificate.objects.filter(
        created_on__lte=AUGUST_8_2022
    )
    for cert in course_run_certificates_till_aug_8:
        certificate_page = get_course_certificate_cms_page(cert)
        if certificate_page:
            # Get and associate valid certificate page revision to certificates created till August 8 2022
            # The valid revision in this case is the latest revision created by August 8 2022
            cert.certificate_page_revision = get_latest_revision_by_date(
                certificate_page, AUGUST_8_2022
            )

    CourseRunCertificate.objects.bulk_update(
        course_run_certificates_till_aug_8, ["certificate_page_revision"]
    )

    program_certificates_till_aug_8 = ProgramCertificate.objects.filter(
        created_on__lte=AUGUST_8_2022
    )
    for cert in program_certificates_till_aug_8:
        certificate_page = get_program_certificate_cms_page(cert)
        if certificate_page:
            cert.certificate_page_revision = get_latest_revision_by_date(
                certificate_page, AUGUST_8_2022
            )

    ProgramCertificate.objects.bulk_update(
        program_certificates_till_aug_8, ["certificate_page_revision"]
    )


class Migration(migrations.Migration):
    dependencies = [
        ("courses", "0028_certificate_page_revision_for_course_and_program"),
    ]

    operations = [
        migrations.RunPython(
            revert_course_program_certificate_revisions,
            set_latest_certificate_revision,
        ),
    ]
