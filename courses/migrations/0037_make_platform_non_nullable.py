# Generated by Django 3.2.21 on 2023-10-05 23:44

from django.db import migrations, models
import django.db.models.deletion

from courses.constants import DEFAULT_PLATFORM_NAME



def setup_courseware_platform(apps, shcema_editor, courseware_cls):
    """Associate a platform to the courseware entries without a platform"""

    courseware_without_platform = courseware_cls.objects.filter(platform__isnull=True)

    if courseware_without_platform.count() > 0:
        # Get a default platform only if needed
        Platform = apps.get_model("courses", "Platform")
        default_platform, _ = Platform.objects.get_or_create(name=DEFAULT_PLATFORM_NAME)

        for courseware in courseware_without_platform:
            courseware.platform = default_platform

        courseware_cls.objects.bulk_update(courseware_without_platform, ["platform"])


def populate_courseware_platform(apps, schema_editor):
    """Populate courseware with a platform if they do not have one"""

    Course = apps.get_model("courses", "Course")
    Program = apps.get_model("courses", "Program")

    setup_courseware_platform(apps, schema_editor, Course)
    setup_courseware_platform(apps, schema_editor, Program)


class Migration(migrations.Migration):

    dependencies = [
        ("courses", "0036_add_platform_model"),
    ]

    operations = [
        # Populate all the existing courses and programs with a platform before we make the field required.
        migrations.RunPython(populate_courseware_platform, migrations.RunPython.noop),
        migrations.AlterField(
            model_name="course",
            name="platform",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="courses.platform"
            ),
        ),
        migrations.AlterField(
            model_name="program",
            name="platform",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="courses.platform"
            ),
        ),
    ]
