# Generated by Django 2.2.4 on 2019-09-11 20:39
import decimal

from django.db import migrations, models


def get_product_version_price_with_discount(
    *, coupon_version, product_version, CouponEligibility
):
    """
    Determine the new discounted price for a product after the coupon discount is applied

    This is copied from a similar function from ecommerce.api so we can make sure this function remains the same
    while the other one can change without affecting migrations.

    Args:
        coupon_version (CouponVersion): the CouponVersion object
        product_version (ProductVersion): the ProductVersion object
        apps (any): The apps argument from the RunPython function

    Returns:
        Decimal: the discounted price for the Product
    """
    price = product_version.price
    if (
        coupon_version
        and CouponEligibility.objects.filter(
            coupon__versions=coupon_version, product__productversions=product_version
        ).exists()
    ):
        discount = (coupon_version.payment_version.amount * price).quantize(
            decimal.Decimal("0.01"), rounding=decimal.ROUND_HALF_UP
        )
    else:
        discount = 0
    return price - discount


def populate_total_price(apps, schema_editor):
    """
    Populate the total_price_paid field.
    """
    Order = apps.get_model("ecommerce", "Order")
    CouponEligibility = apps.get_model("ecommerce", "CouponEligibility")

    for order in Order.objects.all():
        line = order.lines.first()

        redemption = order.couponredemption_set.first()
        if line is not None:
            total = get_product_version_price_with_discount(
                coupon_version=redemption.coupon_version
                if redemption is not None
                else None,
                product_version=line.product_version,
                CouponEligibility=CouponEligibility,
            )
        else:
            total = decimal.Decimal(0)

        order.total_price_paid = total
        order.save()


class Migration(migrations.Migration):

    dependencies = [("ecommerce", "0016_payment_type_choices")]

    operations = [
        migrations.AddField(
            model_name="order",
            name="total_price_paid",
            field=models.DecimalField(
                decimal_places=2, default=None, max_digits=20, null=True
            ),
            preserve_default=False,
        ),
        migrations.RunPython(
            populate_total_price, reverse_code=migrations.RunPython.noop
        ),
        migrations.AlterField(
            model_name="order",
            name="total_price_paid",
            field=models.DecimalField(decimal_places=2, max_digits=20),
            preserve_default=False,
        ),
    ]
